Here are some unit tests using pytest for the provided code:

```python
import pytest
from unittest.mock import patch, MagicMock
from your_flask_app import app, detect_language, generate_test_cases, extract_class_name, save_test_case_to_file

# Test for detect_language function
@patch('your_flask_app.client.chat.completions.create')
def test_detect_language(mock_create):
    mock_create.return_value = MagicMock(choices=[MagicMock(message=MagicMock(content='Python'))])
    result = detect_language('print("Hello, World!")')
    assert result == 'Python', 'Expected Python, but got {}'.format(result)

# Test for generate_test_cases function
@patch('your_flask_app.client.chat.completions.create')
def test_generate_test_cases(mock_create):
    mock_create.return_value = MagicMock(choices=[MagicMock(message=MagicMock(content='Test cases'))])
    result = generate_test_cases('print("Hello, World!")', 'Python', 'pytest')
    assert result == 'Test cases', 'Expected Test cases, but got {}'.format(result)

# Test for extract_class_name function
def test_extract_class_name():
    code = 'class HelloWorld:\n    pass'
    result = extract_class_name(code, 'Python')
    assert result == 'HelloWorld', 'Expected HelloWorld, but got {}'.format(result)

# Test for save_test_case_to_file function
@patch('builtins.open', new_callable=MagicMock)
def test_save_test_case_to_file(mock_open):
    save_test_case_to_file('HelloWorld', 'Python', 'Test cases')
    mock_open.assert_called_once_with('generated_unit_test_cases/HelloWorldTest.py', 'w', encoding='utf-8')

# Test for generate_tests endpoint
@patch('your_flask_app.detect_language')
@patch('your_flask_app.generate_test_cases')
@patch('your_flask_app.extract_class_name')
@patch('your_flask_app.save_test_case_to_file')
def test_generate_tests_endpoint(mock_save, mock_extract, mock_generate, mock_detect):
    mock_detect.return_value = 'Python'
    mock_generate.return_value = 'Test cases'
    mock_extract.return_value = 'HelloWorld'
    with app.test_client() as c:
        response = c.post('/generate_tests', json={'code': 'print("Hello, World!")', 'framework': 'pytest'})
    assert response.status_code == 200
    assert response.get_json() == {'detected_language': 'Python', 'generated_tests': 'Test cases'}

# Test for regenerate_tests_with_feedback endpoint
@patch('your_flask_app.client.chat.completions.create')
def test_regenerate_with_feedback(mock_create):
    mock_create.return_value = MagicMock(choices=[MagicMock(message=MagicMock(content='Test cases'))])
    with app.test_client() as c:
        response = c.post('/regenerate_tests_with_feedback', json={'code': 'print("Hello, World!")', 'framework': 'pytest', 'feedback': 'Feedback'})
    assert response.status_code == 200
    assert response.get_json() == {'generated_tests': 'Test cases'}
```

Please replace `your_flask_app` with the actual name of your Flask application module.