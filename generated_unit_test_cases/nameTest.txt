Here are some pytest unit tests for the Flask application:

```python
import pytest
import os
from unittest.mock import patch, MagicMock
from flask import Flask
from your_flask_app import app, client, detect_language, generate_test_cases, extract_class_name, save_test_case_to_file

# Mocking the OpenAI client
client = MagicMock()

# Mocking the Flask app
app = Flask(__name__)

def test_detect_language():
    # Testing the function with a Python code snippet
    code = "print('Hello, World!')"
    with patch('your_flask_app.client.chat.completions.create') as mock:
        mock.return_value.choices[0].message.content = 'Python'
        result = detect_language(code)
        assert result == 'Python'

def test_generate_test_cases():
    # Testing the function with a Python code snippet and pytest framework
    code = "print('Hello, World!')"
    language = 'Python'
    framework = 'pytest'
    with patch('your_flask_app.client.chat.completions.create') as mock:
        mock.return_value.choices[0].message.content = 'Test cases generated'
        result = generate_test_cases(code, language, framework)
        assert result == 'Test cases generated'

def test_extract_class_name():
    # Testing the function with a Python class
    code = "class MyClass:\n    pass"
    language = 'Python'
    result = extract_class_name(code, language)
    assert result == 'MyClass'

def test_save_test_case_to_file():
    # Testing the function with a Python class and test code
    class_name = 'MyClass'
    language = 'Python'
    test_code = 'def test_my_class():\n    assert True'
    save_test_case_to_file(class_name, language, test_code)
    assert os.path.exists(f'generated_unit_test_cases/{class_name}Test.py')

@pytest.fixture
def client():
    with app.test_client() as client:
        yield client

def test_generate_tests_endpoint(client):
    # Testing the endpoint with a POST request and a Python code snippet
    response = client.post('/generate_tests', json={'code': "print('Hello, World!')", 'framework': 'pytest'})
    assert response.status_code == 200
    assert 'detected_language' in response.get_json()
    assert 'generated_tests' in response.get_json()

def test_regenerate_tests_with_feedback_endpoint(client):
    # Testing the endpoint with a POST request, a Python code snippet and feedback
    response = client.post('/regenerate_tests_with_feedback', json={'code': "print('Hello, World!')", 'framework': 'pytest', 'feedback': 'Include more test cases'})
    assert response.status_code == 200
    assert 'generated_tests' in response.get_json()
```

Please replace `your_flask_app` with the actual name of your Flask application file (without the .py extension). This code assumes that the Flask application and the test file are in the same directory. If they are not, you will need to adjust the import statements accordingly.