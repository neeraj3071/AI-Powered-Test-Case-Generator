Here are some unit tests for the provided code using the pytest framework. Note that these tests mock the OpenAI client and Flask request to isolate the functions under test.

```python
import pytest
from unittest.mock import patch, MagicMock
from flask import Flask
from your_module import detect_language, generate_test_cases, extract_class_name, save_test_case_to_file, generate_tests, regenerate_with_feedback

# Mock the OpenAI client
@patch('your_module.OpenAI')
def test_detect_language(mock_openai):
    mock_openai.chat.completions.create.return_value.choices[0].message.content.strip.return_value = 'python'
    result = detect_language('print("Hello, World!")')
    assert result == 'python'

# Test generate_test_cases function
@patch('your_module.OpenAI')
def test_generate_test_cases(mock_openai):
    mock_openai.chat.completions.create.return_value.choices[0].message.content.strip.return_value = 'test_code'
    result = generate_test_cases('print("Hello, World!")', 'python', 'pytest')
    assert result == 'test_code'

# Test extract_class_name function
def test_extract_class_name():
    result = extract_class_name('class HelloWorld:', 'python')
    assert result == 'HelloWorld'

# Test save_test_case_to_file function
@patch('builtins.open', new_callable=MagicMock)
def test_save_test_case_to_file(mock_open):
    save_test_case_to_file('HelloWorld', 'python', 'test_code')
    mock_open.assert_called_once_with('generated_unit_test_cases/HelloWorldTest.py', 'w', encoding='utf-8')

# Test generate_tests endpoint
@patch('your_module.request')
@patch('your_module.detect_language')
@patch('your_module.generate_test_cases')
@patch('your_module.extract_class_name')
@patch('your_module.save_test_case_to_file')
def test_generate_tests(mock_save, mock_extract, mock_generate, mock_detect, mock_request):
    mock_request.get_json.return_value = {'code': 'print("Hello, World!")', 'framework': 'pytest'}
    mock_detect.return_value = 'python'
    mock_generate.return_value = 'test_code'
    mock_extract.return_value = 'HelloWorld'
    with Flask(__name__).test_request_context():
        result = generate_tests()
    assert result.json == {'detected_language': 'python', 'generated_tests': 'test_code'}

# Test regenerate_with_feedback endpoint
@patch('your_module.request')
@patch('your_module.detect_language')
@patch('your_module.OpenAI')
def test_regenerate_with_feedback(mock_openai, mock_detect, mock_request):
    mock_request.get_json.return_value = {'code': 'print("Hello, World!")', 'framework': 'pytest', 'feedback': 'more tests'}
    mock_detect.return_value = 'python'
    mock_openai.chat.completions.create.return_value.choices[0].message.content.strip.return_value = 'new_test_code'
    with Flask(__name__).test_request_context():
        result = regenerate_with_feedback()
    assert result.json == {'generated_tests': 'new_test_code'}
```

Replace `your_module` with the actual name of the module where the code resides.